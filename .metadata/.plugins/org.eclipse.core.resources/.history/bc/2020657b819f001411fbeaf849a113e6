import java.io.File;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

//getResponseCode for error
//making a graph with nodes and paths :3

public class RecursiveParser {
	public static Page currentLocation;
	public static ArrayList<ArrayList<Integer>> graph; //graph.get(a).get(b) checks the path from nodes.get(a) to nodes.get(b)
	public static ArrayList<Page> nodes;
	public static ArrayList<String> nodeNames;
	
	public RecursiveParser (Page currentPage) {
		this.currentLocation = currentPage;
	}

	public static void main(String[] args) {
		
		currentLocation = new Page("http://localhost:8080/version1/index.html"); //the page the parser is currently on
			//somehow check if they're in the root and don't force them to input index.html
		currentLocation.setRoute(new ArrayList<Page>()); //sets original route to nothing (root page)
		
		//parse();

	}
	
	public static void parse() {
		
		Document doc = null;
		
		try {
			doc = Jsoup.connect(currentLocation.getPathName()).get(); //gets all the html information from the page
		} catch (IOException e) {
			//print a notice saying that the link is unreachable 
			e.printStackTrace();
		}
		
		nodes.add(currentLocation);
		nodeNames.add(currentLocation.getPathName());
		graph.add(new ArrayList<Integer>());
		graph.get(0).add(0);
		
		Elements hrefs = doc.select("a[href]"); //gets all a tags with href
		for (Element e:hrefs) {
			
			String appendToPath = e.attr("href");  //gets the href value from each a tag
			ArrayList<Page> newRPRoute = currentLocation.getRoute();
			newRPRoute.add(currentLocation);
			String newRPPath = currentLocation.getPathName();
			//boolean found = false;
			String appendTo = "/"+appendToPath;
			newRPPath = newRPPath.substring(0,newRPPath.lastIndexOf("/"))+appendTo;
			
			if (!nodeNames.contains(newRPPath)) {
				Page newRPPage = new Page(newRPPath);
				nodeNames.add(newRPPath);
				for (ArrayList<Integer> a:graph) {
					a.add(0);
				}
				graph.add(new ArrayList<Integer>(graph.size()+1));
				int node1loc = nodeNames.indexOf(currentLocation.getPathName());
				int node2loc = nodeNames.indexOf(newRPPath);
				if (exists(newRPPath)) {
					graph.get(nodeNames.indexOf(node1loc)).set(node2loc, 1); //1 means path exists
				} else {
					graph.get(nodeNames.indexOf(node1loc)).set(node2loc, 2); //2 means path is broken (maybe change this to error code)
				}
			}
			
			/*
			if (!currentLocation.getRoute().contains(newRPPath+appendTo)) {
				Page newRPPage = new Page(newRPPath+appendTo);
				newRPPage.setRoute(newRPRoute);
				RecursiveParser rp = new RecursiveParser(newRPPage); //creates a new RecursiveParser for each href encountered
				System.out.println(currentLocation.getPathName()+" "+e+" "+newRPPath+appendTo);
				rp.parse();
				
			}
			*/
		}
	}
	
	public static int respCode(String URLName){
		
	      HttpURLConnection con;
		try {
			con = (HttpURLConnection) new URL(URLName).openConnection();
	 	      con.setRequestMethod("HEAD");
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		

	      return con.getResponseCode();

	  }  

}
